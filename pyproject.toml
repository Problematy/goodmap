[tool.poetry]
name = "goodmap"
version = "1.0.4"
description = "Map engine to serve all the people :)"
authors = ["Krzysztof Kolodzinski <krzysztof.kolodzinski@problematy.pl>"]
readme = "README.md"
exclude = ["goodmap/locale/*/LC_MESSAGES/*.po"]

[tool.poetry.dependencies]
python = "^3.10"
Flask = "3.0.3"
flask-restx = "^1.3.0"
Flask-Babel = "^4.0.0"
Babel = "^2.10.3"
gunicorn = "^20.1.0"
google-cloud-storage = "^2.7.0"
PyYAML = "^6.0"
humanize = "^4.6.0"
Flask-WTF = "^1.2.1"
gql = "^3.4.0"
aiohttp = "^3.8.4"
pydantic = "^2.7.1"
platzky = "^0.4.3"
deprecation = "^2.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.1.2"
coverage = "^6.4.3"
coveralls = "^3.3.1"
pyright = "^1.1.291"
freezegun = "^1.2.2"
black = "^24.8.0"
ruff = "^0.4.4"
platzky-redirections = "^0.1.0"
python-semantic-release = "^10.4.1"

[tool.poetry.group.local.dependencies]
platzky = {path = "vendor/platzky", develop = true}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
pythonVersion = "3.10"
pythonPlatform = "All"

typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportMissingParameterType = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownParameterType = false
reportUnusedFunction = false
reportUnnecessaryTypeIgnoreComment = true
reportUntypedClassDecorator = false
reportUnusedClass = false
reportUntypedBaseClass = false

exclude = [
    "**/vendor/**",
]

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.ruff]
line-length = 100
target-version = "py310"
show-fixes = true
lint.select = [
    "I", # isort
    "F", # Pyflakes
    "E", # pycodestyle Error
    "W", # pycodestyle Warning
    "RUF", # Ruff-specific rules
]

[tool.pytest.ini_options]
addopts = "--ignore=vendor"
markers = [
    "skip_coverage: skip coverage for this test"
]

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
build_command = "poetry build"
dist_path = "dist/"
upload_to_release = true
remove_dist = false
commit_author = "semantic-release <semantic-release>"
commit_message = "chore(release): {version}"
tag_format = "{version}"
commit_parser = "conventional"
changelog_file = "CHANGELOG.md"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true